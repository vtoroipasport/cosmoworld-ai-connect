
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft, Search, Filter, Heart, ShoppingCart, Star, Eye, MessageCircle, Shield, Truck, CreditCard, Timer, Gavel, TrendingUp, Award } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';
import ModernCard from '@/components/ModernCard';
import NeonButton from '@/components/NeonButton';
import CosmoAI from '@/components/CosmoAI';

const Marketplace = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [favorites, setFavorites] = useState<number[]>([]);
  const [cart, setCart] = useState<number[]>([]);
  const [sortBy, setSortBy] = useState('relevance');
  const [bidAmount, setBidAmount] = useState<{[key: number]: number}>({});

  const categories = [
    { id: 'all', name: '–í—Å–µ', icon: 'üõçÔ∏è' },
    { id: 'electronics', name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', icon: 'üì±' },
    { id: 'fashion', name: '–û–¥–µ–∂–¥–∞', icon: 'üëï' },
    { id: 'home', name: '–î–æ–º', icon: 'üè†' },
    { id: 'collectibles', name: '–ö–æ–ª–ª–µ–∫—Ü–∏–∏', icon: 'üèÜ' },
    { id: 'auto', name: '–ê–≤—Ç–æ', icon: 'üöó' },
    { id: 'sports', name: '–°–ø–æ—Ä—Ç', icon: '‚öΩ' }
  ];

  const products = [
    {
      id: 1,
      title: 'iPhone 15 Pro Max 256GB',
      currentBid: 89999,
      buyNowPrice: 99999,
      originalPrice: 110000,
      category: 'electronics',
      seller: 'TechStore',
      sellerRating: 4.9,
      condition: '–ù–æ–≤–æ–µ',
      location: '–ú–æ—Å–∫–≤–∞',
      shipping: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞',
      image: 'üì±',
      views: 1247,
      watchers: 89,
      bids: 23,
      timeLeft: '2–¥ 15—á 23–º',
      auction: true,
      buyNow: true,
      photos: 8,
      description: '–ù–æ–≤—ã–π iPhone 15 Pro Max —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–µ–π Apple',
      topBidder: 'user***5',
      bidHistory: [
        { bidder: 'user***5', amount: 89999, time: '2 –º–∏–Ω –Ω–∞–∑–∞–¥' },
        { bidder: 'user***2', amount: 89500, time: '5 –º–∏–Ω –Ω–∞–∑–∞–¥' },
        { bidder: 'user***8', amount: 89000, time: '12 –º–∏–Ω –Ω–∞–∑–∞–¥' }
      ]
    },
    {
      id: 2,
      title: 'Vintage Rolex Submariner 1980',
      currentBid: 450000,
      category: 'collectibles',
      seller: 'WatchCollector',
      sellerRating: 4.8,
      condition: '–ë/—É –æ—Ç–ª–∏—á–Ω–æ–µ',
      location: '–°–ü–±',
      shipping: '–î–æ—Å—Ç–∞–≤–∫–∞ 990‚ÇΩ',
      image: '‚åö',
      views: 2341,
      watchers: 156,
      bids: 67,
      timeLeft: '1–¥ 8—á 45–º',
      auction: true,
      buyNow: false,
      photos: 12,
      description: '–†–µ–¥–∫–∏–µ –≤–∏–Ω—Ç–∞–∂–Ω—ã–µ —á–∞—Å—ã Rolex Submariner 1980 –≥–æ–¥–∞ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
      topBidder: 'collector***1',
      bidHistory: [
        { bidder: 'collector***1', amount: 450000, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
        { bidder: 'watch***7', amount: 445000, time: '8 –º–∏–Ω –Ω–∞–∑–∞–¥' },
        { bidder: 'vintage***3', amount: 440000, time: '15 –º–∏–Ω –Ω–∞–∑–∞–¥' }
      ]
    },
    {
      id: 3,
      title: 'MacBook Pro M3 16" 512GB',
      currentBid: 199999,
      buyNowPrice: 219999,
      originalPrice: 249999,
      category: 'electronics',
      seller: 'AppleStore',
      sellerRating: 5.0,
      condition: '–ù–æ–≤–æ–µ',
      location: '–ú–æ—Å–∫–≤–∞',
      shipping: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞',
      image: 'üíª',
      views: 890,
      watchers: 67,
      bids: 12,
      timeLeft: '5–¥ 12—á 30–º',
      auction: true,
      buyNow: true,
      photos: 6,
      description: '–ù–æ–≤—ã–π MacBook Pro —Å —á–∏–ø–æ–º M3 –∏ –≥–∞—Ä–∞–Ω—Ç–∏–µ–π Apple',
      topBidder: 'dev***4',
      bidHistory: [
        { bidder: 'dev***4', amount: 199999, time: '30 –º–∏–Ω –Ω–∞–∑–∞–¥' },
        { bidder: 'student***1', amount: 195000, time: '1 —á–∞—Å –Ω–∞–∑–∞–¥' }
      ]
    }
  ];

  const handlePlaceBid = (productId: number) => {
    const product = products.find(p => p.id === productId);
    const bidValue = bidAmount[productId];
    
    if (!bidValue || bidValue <= (product?.currentBid || 0)) {
      toast({
        title: "–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏",
        description: "–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π",
        variant: "destructive"
      });
      return;
    }

    toast({
      title: "–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞!",
      description: `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ ${bidValue.toLocaleString()} ‚ÇΩ –Ω–∞ "${product?.title}" –ø—Ä–∏–Ω—è—Ç–∞`,
    });
    
    setBidAmount({...bidAmount, [productId]: 0});
  };

  const handleBuyNow = (product: any) => {
    toast({
      title: "–ü–æ–∫—É–ø–∫–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!",
      description: `"${product.title}" –∑–∞ ${product.buyNowPrice?.toLocaleString()} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`,
    });
    addToCart(product.id);
  };

  const addToCart = (productId: number) => {
    if (!cart.includes(productId)) {
      setCart([...cart, productId]);
    }
  };

  const toggleFavorite = (productId: number) => {
    if (favorites.includes(productId)) {
      setFavorites(favorites.filter(id => id !== productId));
      toast({
        title: "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
        description: "–¢–æ–≤–∞—Ä —É–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è",
      });
    } else {
      setFavorites([...favorites, productId]);
      toast({
        title: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ",
        description: "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã",
      });
    }
  };

  const filteredProducts = products.filter(product => {
    const matchesSearch = product.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          product.seller.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const sortedProducts = [...filteredProducts].sort((a, b) => {
    switch (sortBy) {
      case 'price_low':
        return (a.currentBid || a.buyNowPrice || 0) - (b.currentBid || b.buyNowPrice || 0);
      case 'price_high':
        return (b.currentBid || b.buyNowPrice || 0) - (a.currentBid || a.buyNowPrice || 0);
      case 'ending_soon':
        return a.timeLeft.localeCompare(b.timeLeft);
      case 'most_watched':
        return b.watchers - a.watchers;
      case 'most_bids':
        return (b.bids || 0) - (a.bids || 0);
      default:
        return 0;
    }
  });

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
      {/* Header */}
      <div className="glass-card border-b border-gray-200 dark:border-gray-700 sticky top-0 z-10 bg-white/95 dark:bg-gray-800/95">
        <div className="max-w-md mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => navigate('/')}
              className="text-gray-700 dark:text-gray-300"
            >
              <ArrowLeft className="w-5 h-5" />
            </Button>
            <div>
              <h1 className="text-gray-900 dark:text-white font-bold text-xl">CosmoMarket</h1>
              <p className="text-xs text-muted-foreground">–ê—É–∫—Ü–∏–æ–Ω—ã –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏</p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Button variant="ghost" size="sm" className="relative">
              <Heart className="w-5 h-5" />
              {favorites.length > 0 && (
                <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                  {favorites.length}
                </span>
              )}
            </Button>
            <Button variant="ghost" size="sm" className="relative">
              <ShoppingCart className="w-5 h-5" />
              {cart.length > 0 && (
                <span className="absolute -top-1 -right-1 bg-blue-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                  {cart.length}
                </span>
              )}
            </Button>
          </div>
        </div>
      </div>

      {/* Search */}
      <div className="max-w-md mx-auto px-4 py-4">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 w-4 h-4" />
          <Input
            placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
          />
        </div>
      </div>

      {/* Categories */}
      <div className="max-w-md mx-auto px-4 pb-4">
        <div className="flex space-x-2 overflow-x-auto pb-2">
          {categories.map((category) => (
            <NeonButton
              key={category.id}
              onClick={() => setSelectedCategory(category.id)}
              variant={selectedCategory === category.id ? 'primary' : 'secondary'}
              size="sm"
              className="whitespace-nowrap"
            >
              <span className="mr-1">{category.icon}</span>
              {category.name}
            </NeonButton>
          ))}
        </div>
      </div>

      {/* Sort Options */}
      <div className="max-w-md mx-auto px-4 pb-4">
        <div className="flex space-x-2 overflow-x-auto pb-2">
          {[
            { id: 'ending_soon', name: '–°–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è' },
            { id: 'most_bids', name: '–ë–æ–ª—å—à–µ —Å—Ç–∞–≤–æ–∫' },
            { id: 'price_low', name: '–î–µ—à–µ–≤–ª–µ' },
            { id: 'price_high', name: '–î–æ—Ä–æ–∂–µ' },
            { id: 'most_watched', name: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ' }
          ].map((sort) => (
            <NeonButton
              key={sort.id}
              onClick={() => setSortBy(sort.id)}
              variant={sortBy === sort.id ? 'primary' : 'secondary'}
              size="sm"
              className="whitespace-nowrap text-xs"
            >
              {sort.name}
            </NeonButton>
          ))}
        </div>
      </div>

      {/* Products List */}
      <div className="max-w-md mx-auto px-4 pb-6">
        <div className="space-y-4">
          {sortedProducts.map((product) => (
            <ModernCard
              key={product.id}
              className="p-4 bg-white dark:bg-gray-800"
            >
              <div className="flex space-x-3 mb-4">
                <div className="w-20 h-20 bg-gradient-to-r from-blue-100 to-purple-100 dark:from-blue-900/30 dark:to-purple-900/30 rounded-lg flex items-center justify-center text-2xl relative">
                  {product.image}
                  <div className="absolute -top-1 -right-1 bg-gray-800 text-white text-xs px-1 rounded">
                    {product.photos}
                  </div>
                </div>
                
                <div className="flex-1">
                  <div className="flex items-start justify-between mb-2">
                    <h3 className="text-gray-900 dark:text-white font-semibold text-sm pr-2">
                      {product.title}
                    </h3>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => toggleFavorite(product.id)}
                      className="p-1"
                    >
                      <Heart 
                        className={`w-4 h-4 ${
                          favorites.includes(product.id) 
                            ? 'text-red-500 fill-red-500' 
                            : 'text-gray-400'
                        }`} 
                      />
                    </Button>
                  </div>
                  
                  <div className="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-300 mb-2">
                    <Star className="w-3 h-3 text-yellow-500" />
                    <span className="text-yellow-600">{product.sellerRating}</span>
                    <span className="text-blue-600">{product.seller}</span>
                  </div>
                </div>
              </div>

              {/* Auction Info */}
              {product.auction && (
                <div className="bg-gradient-to-r from-red-50 to-orange-50 dark:from-red-900/20 dark:to-orange-900/20 rounded-lg p-3 mb-4">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <Gavel className="w-4 h-4 text-red-600" />
                      <span className="text-red-600 font-bold text-sm">–ê–£–ö–¶–ò–û–ù</span>
                    </div>
                    <div className="flex items-center gap-1 text-orange-600">
                      <Timer className="w-3 h-3" />
                      <span className="text-xs font-bold">{product.timeLeft}</span>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between mb-3">
                    <div>
                      <div className="text-lg font-bold text-gray-900 dark:text-white">
                        {product.currentBid.toLocaleString()} ‚ÇΩ
                      </div>
                      <div className="text-xs text-gray-600">
                        –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ ‚Ä¢ {product.bids} —Å—Ç–∞–≤–æ–∫
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-xs text-gray-600">–õ–∏–¥–∏—Ä—É–µ—Ç:</div>
                      <div className="text-sm font-medium text-green-600">{product.topBidder}</div>
                    </div>
                  </div>

                  {/* Bid Input */}
                  <div className="flex gap-2 mb-3">
                    <Input
                      type="number"
                      placeholder={`–ú–∏–Ω. ${(product.currentBid + 1000).toLocaleString()}`}
                      value={bidAmount[product.id] || ''}
                      onChange={(e) => setBidAmount({...bidAmount, [product.id]: parseInt(e.target.value) || 0})}
                      className="flex-1 text-sm"
                    />
                    <NeonButton
                      onClick={() => handlePlaceBid(product.id)}
                      size="sm"
                      className="px-4"
                    >
                      <Gavel className="w-3 h-3 mr-1" />
                      –°—Ç–∞–≤–∫–∞
                    </NeonButton>
                  </div>

                  {/* Recent Bids */}
                  <div className="border-t pt-2">
                    <div className="text-xs text-gray-600 mb-1">–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏:</div>
                    {product.bidHistory.slice(0, 2).map((bid, index) => (
                      <div key={index} className="flex justify-between text-xs">
                        <span className="text-gray-600">{bid.bidder}</span>
                        <span className="font-medium">{bid.amount.toLocaleString()} ‚ÇΩ</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Buy Now Option */}
              {product.buyNow && product.buyNowPrice && (
                <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-3 mb-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="text-sm text-blue-600 font-medium mb-1">
                        –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å
                      </div>
                      <div className="text-lg font-bold text-gray-900 dark:text-white">
                        {product.buyNowPrice.toLocaleString()} ‚ÇΩ
                      </div>
                    </div>
                    <NeonButton
                      onClick={() => handleBuyNow(product)}
                      variant="primary"
                      size="sm"
                    >
                      <CreditCard className="w-3 h-3 mr-1" />
                      –ö—É–ø–∏—Ç—å
                    </NeonButton>
                  </div>
                </div>
              )}

              {/* Stats */}
              <div className="flex items-center justify-between text-xs text-gray-500 mb-3">
                <div className="flex items-center gap-3">
                  <div className="flex items-center gap-1">
                    <Eye className="w-3 h-3" />
                    {product.views}
                  </div>
                  <div className="flex items-center gap-1">
                    <Heart className="w-3 h-3" />
                    {product.watchers}
                  </div>
                  {product.bids && (
                    <div className="flex items-center gap-1">
                      <Gavel className="w-3 h-3" />
                      {product.bids}
                    </div>
                  )}
                </div>
                <div className="flex items-center gap-1">
                  <Truck className="w-3 h-3 text-green-600" />
                  <span className="text-green-600">{product.shipping}</span>
                </div>
              </div>

              {/* Actions */}
              <div className="flex items-center space-x-2">
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => toast({title: "–°–æ–æ–±—â–µ–Ω–∏–µ", description: `–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É ${product.seller} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`})}
                  className="flex-1"
                >
                  <MessageCircle className="w-3 h-3 mr-1" />
                  –ù–∞–ø–∏—Å–∞—Ç—å
                </Button>
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => addToCart(product.id)}
                  className="px-3"
                >
                  <ShoppingCart className="w-3 h-3" />
                </Button>
              </div>
            </ModernCard>
          ))}
        </div>
      </div>

      <CosmoAI service="marketplace" />
    </div>
  );
};

export default Marketplace;
